name: Continuous Deployment Workflow for Inventory Tracker

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v5

      # Set up Java JDK 17
      - name: Set up Java JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 17

      # Set environment variables for database and other config values
      - name: Set environment variables for Spring Boot
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      # Modify application.yml to inject the environment variables before building
      - name: Replace placeholders in application.yml
        run: |
          sed -i "s|\${DB_HOST}|${{ secrets.DB_HOST }}|g" src/main/resources/application.yml
          sed -i "s|\${DB_PORT}|${{ secrets.DB_PORT }}|g" src/main/resources/application.yml
          sed -i "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" src/main/resources/application.yml
          sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" src/main/resources/application.yml
          sed -i "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" src/main/resources/application.yml

      # Build the Spring Boot application and package it into a jar file
      - name: Build and Package the Spring Boot Application
        run: mvn clean install -DskipTests

      # List files in the target directory to verify jar is generated
      - name: List files in target directory
        run: ls -al target/

      # Upload the .jar file as an artifact to be used in the deploy job
      - name: Upload .jar file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: inventory-tracker-jar   # Artifact name
          path: target/inventory-tracker-1.0.jar  # Path to the .jar file

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Make sure the build job completes before deploying

    steps:
      # Download the artifact uploaded in the build job
      - name: Download .jar artifact
        uses: actions/download-artifact@v5
        with:
          name: inventory-tracker-jar  # Match the artifact name used in the build job

      - name: List files in download directory
        run: ls -la /home/runner/work/InventoryTracker-SpringBoot-Backend/InventoryTracker-SpringBoot-Backend

      - name: Check if .jar file exists
        run: |
          if [ ! -f inventory-tracker-jar/inventory-tracker-1.0.jar ]; then
            echo "Error: .jar file not found!"
            exit 1
          fi

      - name: Set up SSH key for deployment
        run: |
                echo "$PRIVATE_KEY" > private_key.pem
                chmod 600 private_key.pem
              env:
                PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # Copy the .jar file to the EC2 instance
      - name: Copy .jar file to EC2
        run: |
          scp -v -i ${{ secrets.SSH_PRIVATE_KEY }} inventory-tracker-jar/inventory-tracker-1.0.jar ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/inventory-tracker-1.0.jar
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # Restart the Spring Boot application on the EC2 instance
      - name: Restart the application on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Stop the existing Spring Boot application if running
            sudo systemctl stop inventory-tracker.service || true
            # Start the Spring Boot application service
            sudo systemctl start inventory-tracker.service
